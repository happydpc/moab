################################################################################
#                           Standard Stuff
################################################################################
AC_INIT(qvdual, 0.1)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(qvdual,0.1)

AC_PROG_LN_S
AC_PROG_MAKE_SET


###############################################################################
#                           Parallel
###############################################################################
# Need to check this early so we can look for the correct compiler
AC_ARG_WITH( [mpi], AC_HELP_STRING([[--with-mpi(=DIR)]], [Enable parallel support]),
             [WITH_MPI=$withval],[WITH_MPI=no] )
case "x$WITH_MPI" in
  xno)
    AC_PROG_CC( [cc gcc cl egcs] )
    AC_PROG_CXX( [CC aCC cxx xlC xlC_r pgCC c++ g++ gpp cc++ cl FCC KCC RCC] )
    ;;
  xyes)
    AC_PROG_CC( [mpicc] )
    AC_PROG_CXX([mpiCC] )
    ;;
  x*)
    AC_PROG_CC( [${WITH_MPI}/bin/mpicc] )
    AC_PROG_CXX([${WITH_MPI}/bin/mpiCC] )
    ;;
esac
AM_CONDITIONAL(PARALLEL,[test "x$WITH_MPI" != "xno"])


################################################################################
#                           Standard Stuff
################################################################################
AC_PROG_CXXCPP
# Try to determine compiler-specific flags.  This must be done
# before setting up libtool so that it can override libtool settings.
SNL_CC_FLAGS
SNL_CXX_FLAGS
CFLAGS="$SNL_CC_SPECIAL"
CXXFLAGS="$SNL_CXX_SPECIAL"
AC_PROG_LIBTOOL

AC_CHECK_PROG([ZCAT],[gunzip],[gunzip -c],[])
AC_CHECK_PROG([ZCAT],[gzip],[gzip -cd],[])
AC_CHECK_PROG([ZCAT],[zcat],[zcat],[])
if test "x" = "x$ZCAT"; then
  AC_MSG_WARN([[Cannot run tests: no way to uncompress input files.]])
fi
AC_SUBST([ZCAT])
AM_CONDITIONAL([HAVE_ZCAT],[test "x" = "x$ZCAT"])
LIBS="-lm"


################################################################################
#                           COMPILER OPTIONS
################################################################################
AC_ARG_ENABLE( debug, AC_HELP_STRING([--enable-debug],[Debug symbols (-g)]),
               [enable_debug=$enableval], [enable_debug=] )  
AC_ARG_ENABLE( optimize, AC_HELP_STRING([--enable-optimize],[Compile optimized (-O2)]),
               [enable_optimize=$enableval], 
	       [enable_optimize=
		if test "x" == "x$enable_debug"; then
		  enable_optimize=yes
		fi ] )

# Choose compiler flags from CLI args
if test "xyes" = "x$enable_debug"; then
  CXXFLAGS="$CXXFLAGS -g"
  CFLAGS="$CLFAGS -g"
fi
if test "xyes" = "x$enable_optimize"; then
  CXXFLAGS="$CXXFLAGS -O2"
  CFLAGS="$CFLAGS -O2"
fi

# This requires SNL_CXX_FLAGS and SNL_CC_FLAGS to have been called first
AC_ARG_ENABLE( 32bit, AC_HELP_STRING([--enable-32bit],[Force 32-bit objects]),
[
  if test "xyes" != "x$enableval"; then
    AC_MSG_ERROR([Unknown argument --enable-32bit=$enableval])
  elif test "x" = "x$SNL_CXX_32BIT"; then
    AC_MSG_ERROR([Don't know how to force 32-bit C++ on this platform.  Try setting CXXFLAGS manually])
  elif test "x" = "x$SNL_CC_32BIT"; then
    AC_MSG_ERROR([Don't know how to force 32-bit C on this platform.  Try setting CFLAGS manually])
  fi
  CXXFLAGS="$CXXFLAGS $SNL_CXX_32BIT"
  CFLAGS="$CFLAGS $SNL_CC_32BIT"
  enable_32bit=yes
])
# This requires SNL_CXX_FLAGS and SNL_CC_FLAGS to have been called first
AC_ARG_ENABLE( 64bit, AC_HELP_STRING([--enable-64bit],[Force 64-bit objects]),
[
  if test "xyes" != "x$enableval"; then
    AC_MSG_ERROR([Unknown argument --enable-64bit=$enableval])
  elif test "x" = "x$SNL_CXX_64BIT"; then
    AC_MSG_ERROR([Don't know how to force 64-bit C++ on this platform.  Try setting CXXFLAGS manually])
  elif test "x" = "x$SNL_CC_64BIT"; then
    AC_MSG_ERROR([Don't know how to force 64-bit C on this platform.  Try setting CFLAGS manually])
  elif test "xyes" = "x$enable_32bit"; then
    AC_MSG_ERROR([Cannot do both --enable-32bit and --enable-64bit])
  fi
  CXXFLAGS="$CXXFLAGS $SNL_CXX_64BIT"
  CFLAGS="$CFLAGS $SNL_CC_64BIT"
])


################################################################################
#                           HDF5 OPTIONS
################################################################################

AC_MSG_CHECKING([if HDF5 support is enabled])
AC_ARG_WITH(hdf5, 
[AC_HELP_STRING([--with-hdf5=DIR], [Specify HDF5 library to use for native file format])
AC_HELP_STRING([--without-hdf5], [Disable support for native HDF5 file format])],
[HDF5_ARG=$withval], [HDF5_ARG=yes])
if test "xno" = "x$HDF5_ARG"; then
  AC_MSG_RESULT([no])
  AC_MSG_WARN([Support for native HDF5 file format disabled])
else
  AC_MSG_RESULT([yes])
fi

 # if HDF5 support is not disabled
if test "xno" != "x$HDF5_ARG"; then
    # Add flag to defines
  DEFINES="$DEFINES -DHDF5_FILE"

    # if a path is specified, update LIBS and INCLUDES accordingly
  if test "xyes" != "x$HDF5_ARG"; then
    if test -d "${HDF5_ARG}/lib"; then
      LIBS="$LIBS -L${HDF5_ARG}/lib"
    elif test -d "${HDF5_ARG}"; then
      LIBS="$LIBS -L${HDF5_ARG}"
    else
      AC_MSG_ERROR("$HDF5_ARG is not a directory.")
    fi
    if test -d "${HDF5_ARG}/include"; then
      INCLUDES="$INCLUDES -I${HDF5_ARG}/include"
    else
      INCLUDES="$INCLUDES -I${HDF5_ARG}"
    fi
  fi
  
    # check for libraries and headers
  old_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $INCLUDES"
  AC_CHECK_HEADERS( [hdf5.h], [], [AC_MSG_ERROR("HDF5 header not found")] )
  CPPFLAGS="$old_CPPFLAGSS"
  AC_CHECK_LIB( [hdf5], [H5Fopen], [], [AC_MSG_ERROR("HDF5 library not found")] )
  LIBS="$LIBS -lhdf5"
fi
AM_CONDITIONAL(HDF5_FILE, [test "xno" != "x$HDF5_ARG"])


################################################################################
#                           NetCDF OPTIONS
################################################################################

AC_MSG_CHECKING([if ExodusII support is enabled])
AC_ARG_WITH(netcdf, 
[AC_HELP_STRING([--with-netcdf=DIR], [Specify NetCDF library to use for ExodusII file format])
AC_HELP_STRING([--without-netcdf], [Disable support for ExodusII file format])],
[NETCDF_ARG=$withval], [NETCDF_ARG=yes])
if test "xno" = "x$NETCDF_ARG"; then
  AC_MSG_RESULT([no])
  AC_MSG_WARN([Support for ExodusII file format disabled])
else
  AC_MSG_RESULT([yes])
fi

 # if NetCDF support is not disabled
if test "xno" != "x$NETCDF_ARG"; then
    # Add flag to defines
  DEFINES="$DEFINES -DNETCDF_FILE"

    # Check for stream headers and set STRSTREAM_H_SPEC accordingly
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_CHECK_HEADER( [strstream.h], [NETCDF_DEF="-DSTRSTREAM_H_SPEC=<strstream.h>"], [
    AC_CHECK_HEADER( [sstream.h], [NETCDF_DEF="-DSTRSTREAM_H_SPEC=<sstream.h>"], [
      AC_CHECK_HEADER( [strstream], [NETCDF_DEF="-DSTRSTREAM_H_SPEC=<strstream>"], [
        AC_CHECK_HEADER( [sstream], [NETCDF_DEF="-DSTRSTREAM_H_SPEC=<sstream>"] )
  ] ) ] ) ] )
  AC_LANG_RESTORE

    # if a path is specified, update LIBS and INCLUDES accordingly
  if test "xyes" != "x$NETCDF_ARG"; then
    if test -d "${NETCDF_ARG}/lib"; then
      LIBS="$LIBS -L${NETCDF_ARG}/lib"
    elif test -d "${NETCDF_ARG}"; then
      LIBS="$LIBS -L${NETCDF_ARG}"
    else
      AC_MSG_ERROR("$NETCDF_ARG is not a directory.")
    fi
    if test -d "${NETCDF_ARG}/include"; then
      INCLUDES="$INCLUDES -I${NETCDF_ARG}/include"
    elif test -d "${NETCDF_ARG}/inc"; then
      INCLUDES="$INCLUDES -I${NETCDF_ARG}/inc"
    else
      INCLUDES="$INCLUDES -I${NETCDF_ARG}"
    fi
  fi
  
  old_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $INCLUDES $NETCDF_DEF"
  old_CXXCPPFLAGS="$CXXCPPFLAGS"
  CXXCPPFLAGS="$CXXCPPFLAGS $INCLUDES $NETCDF_DEF"
  old_CXXFLAGS="$CXXFLAGS"
  CXXFLAGS="$CXXFLAGS $INCLUDES $NETCDF_DEF"
   # Check for C library
  AC_CHECK_HEADERS( [netcdf.h], [], [AC_MSG_ERROR("NetCDF header not found")] )
  AC_CHECK_LIB( [netcdf], [nc_open], [], [AC_MSG_ERROR("NetCDF library not found")] )
  LIBS="$LIBS -lnetcdf_c++ -lnetcdf"
   # Check for C++ library
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_CHECK_HEADERS( [netcdf.hh], [], [AC_MSG_ERROR([[NetCDF C++ headers not found.]])] )
  AC_MSG_CHECKING([[for netcdf_c++ library]])
  AC_TRY_LINK(
    [#include <netcdf.hh>], [NcFile ncf("foo",NcFile::ReadOnly);],
    [AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]); AC_MSG_ERROR([NetCDF C++ API not found])] )
  AC_LANG_RESTORE
  CPPFLAGS="$old_CPPFLAGS"
  CXXCPPFLAGS="$old_CXXCPPFLAGS"
  CXXFLAGS="$old_CXXFLAGS"
  DEFINES="$DEFINES '$NETCDF_DEF'"
fi
AM_CONDITIONAL(NETCDF_FILE, [test "xno" != "x$NETCDF_ARG"])


################################################################################
#                                  MOAB
################################################################################
AC_ARG_WITH(MOAB,
[AC_HELP_STRING([--with-MOAB=DIR], [Specify directory containing MOAB])],
[MOAB_DIR=$withval],[MOAB_DIR=../..])
case "x$MOAB_DIR" in
  xno)
    AC_MSG_ERROR([Invalid option: --without-MOAB])
    ;;
  xyes|x)
    AC_MSG_ERROR([--with-MOAB=DIR requires an argument])
    ;;
esac

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

MOAB_INC_DIR=
old_CXXCPPFLAGS="$CXXCPPFLAGS"
old_CXXFLAGS="$CXXFLAGS"
old_CPPFLAGS="$CPPFLAGS"
for dir in ${MOAB_DIR} ${MAOB_DIR}/include; do
  if test "x$MOAB_INC_DIR" = "x"; then
    CXXCPPFLAGS="-I$dir"
    CXXFLAGS="$CXXCPPFLAGS"
    CPPFLAGS="$CXXCPPFLAGS"
    unset ac_cv_header_MBInterface_hpp
    AC_CHECK_HEADER([MBInterface.hpp],[MOAB_INC_DIR="$dir"])
  fi
done
if test "x$MOAB_INC_DIR" = "x"; then
  AC_MSG_ERROR([Couldn't find MOAB header: MBInterface.hpp"])
else
  AC_MSG_RESULT([Found MBInterface.hpp in $MOAB_INC_DIR])
fi
CXXCPPFLAGS="$old_CXXCPPFLAGS"
CXXFLAGS="$old_CXXFLAGS"
CPPFLAGS="$old_CPPFLAGS"
INCLUDES="-I$MOAB_INC_DIR $INCLUDES"

MOAB_LIB_DIR=
old_LIBS="$LIBS"
for dir in ${MOAB_DIR}/.libs ${MOAB_DIR} ${MAOB_DIR}/lib; do
  if test "x$MOAB_LIB_DIR" = "x"; then
    LIBS="$old_LIBS -L$dir"
    unset ac_cv_lib_MOAB
    AC_HAVE_LIBRARY([MOAB],[MOAB_LIB_DIR="$dir"])
  fi
done
if test "x$MOAB_LIB_DIR" = "x"; then
  AC_MSG_ERROR([Couldn't find MOAB library (-lMOAB)"])
else
  AC_MSG_RESULT([Found -lMOAB in $MOAB_LIB_DIR])
fi
LIBS="$old_LIBS -L$MOAB_LIB_DIR -lMOAB"

AC_LANG_RESTORE


################################################################################
#                               GraphViz
################################################################################
AC_ARG_WITH([graphviz],
[AC_HELP_STRING([--with-graphviz=DIR], [Specify directory containing GraphViz])],
[GRAPH_DIR=$withval],[GRAPH_DIR=])

case "x$GRAPH_DIR" in
  xno)
    AC_MSG_ERROR([Invalid option: --without-graphviz])
    ;;
  xyes|x)
    GRAPH_INC_DIR=
    GRAPH_DIR=
    for dir in /usr /usr/local/ /; do
      if test "x" = "x$GRAPH_DIR"; then
        AC_CHECK_FILE([${dir}/include/graphviz/dotneato.h],[GRAPH_DIR="$dir"])
      fi
    done
    AC_MSG_CHECKING([for GraphViz include dir])
    if test "x" != x"$GRAPH_DIR"; then
      GRAPH_INC_DIR="-I${GRAPH_DIR}/include/graphviz"
    fi
    AC_MSG_RESULT([$GRAPH_INC_DIR])
    AC_MSG_CHECKING([for GraphViz library dir])
    GRAPH_LIB_DIR=
    for dir in ${GRAPH_DIR}/lib/graphviz /usr/lib/graphviz /usr/local/lib/graphviz /lib/graphviz; do
      if test "x" = "x$GRAPH_LIB_DIR"; then
        if test -d $dir; then
          GRAPH_LIB_DIR=-L$dir
        fi
      fi
    done
    AC_MSG_RESULT([$GRAPH_LIB_DIR])
    ;;
  x?*)
    GRAPH_INC_DIR=
    for dir in ${GRAPH_DIR}/include/graphviz ${GRAPH_DIR}/include ${GRAPH_DIR}; do
      if test "x" = "x$GRAPH_INC_DIR"; then
        AC_CHECK_FILE([${dir}/dotneato.h],[GRAPH_INC_DIR="-I$dir"])
      fi
    done
    AC_MSG_CHECKING([for GraphViz include dir])
    if test "x" = x"$GRAPH_INC_DIR"; then
      AC_MSG_RESULT([no])
      AC_MSG_ERROR([Cannot find GraphViz headers in $GRAPH_DIR])
    else
      AC_MSG_RESULT([$GRAPH_INC_DIR])
    fi
    AC_MSG_CHECKING([for GraphViz library dir])
    GRAPH_LIB_DIR=
    for dir in ${GRAPH_DIR}/lib/graphviz ${GRAPH_DIR}/lib ${GRAPH_DIR}; do
      if test "x" = "x$GRAPH_LIB_DIR"; then
        if test -d $dir; then
          GRAPH_LIB_DIR=-L$dir
        fi
      fi
    done
    if test "x" = x"$GRAPH_LIB_DIR"; then
      AC_MSG_RESULT([no])
      AC_MSG_ERROR([Cannot find GraphViz libraries in $GRAPH_DIR])
    else
      AC_MSG_RESULT([$GRAPH_LIB_DIR])
    fi
    ;;
esac

old_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $GRAPH_INC_DIR"
AC_CHECK_HEADERS([dotneato.h],[],[AC_MSG_ERROR([Missing GraphViz header])])
CPPFLAGS="$old_CPPFLAGS"
INCLUDES="$INCLUDES $GRAPH_INC_DIR"

LIBS="$LIBS $GRAPH_LIB_DIR"
AC_CHECK_LIB([graph],[aginitlib],[],[AC_MSG_ERROR([Cannot find GraphViz library: -lgraph])])
AC_CHECK_LIB([dotneato],[gvContext],[],[AC_MSG_ERROR([Cannot find GraphViz library: -ldotneato])],[-lgraph])
LIBS="$LIBS -ldotneato -lgraph"


################################################################################
#                                   X
################################################################################
AC_PATH_X
AC_PATH_XTRA
if test "xyes" = "x$no_x"; then
  AC_MSG_ERROR([Cannot build qvdual without X])
fi


################################################################################
#                                  VTK
################################################################################
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

AC_ARG_WITH([vtk],
[AC_HELP_STRING([--with-vtk=DIR], [Specify directory containing VTK])],
[VTK_DIR=$withval],[VTK_DIR=])

case "x$VTK_DIR" in
  xno)
    AC_MSG_ERROR([Invalid option: --without-vtk])
    ;;
  xyes|x)
    VTK_LIB_DIR=
    VTK_INC_DIR=
    for dir in /usr/include/vtk /usr/local/include/vtk /include/vtk; do
      if test "x" = "x$VTK_INC_DIR"; then
        AC_CHECK_FILE([${dir}/vtkRenderer.h],[VTK_INC_DIR="$dir"])
      fi
    done
    if test x = x"$VTK_INC_DIR"; then
      AC_CHECK_HEADER([vtkRenderer.h],[],
                      [AC_MSG_ERROR("Could not find VTK header 'vtkRenderer.h'")])
    else
      INCLUDES="$INCLUDES -I$VTK_INC_DIR"
    fi
    ;;
  x?*)
    for dir in ${VTK_DIR}/include/vtk ${VTK_DIR}/include ${VTK_DIR}; do
      if test "x" = "x$VTK_INC_DIR"; then
        AC_CHECK_FILE([${dir}/vtkRenderer.h],[VTK_INC_DIR="$dir"])
      fi
    done
    if test "x" = "x$VTK_INC_DIR"; then
      AC_MSG_ERROR("Could not find vtkRenderer.h in $VTK_DIR")
    fi
    INCLUDES="$INCLUDES -I$VTK_INC_DIR"
    old_LIBS="$LIBS"
    for dir in ${VTK_DIR}/lib/vtk ${VTK_DIR}/lib ${VTK_DIR}; do
      if test "x" = "x$VTK_LIB_DIR"; then
        LIBS="$old_LIBS -L$dir"
        unset ac_cv_lib_vtkexpat
        AC_HAVE_LIBRARY([vtkexpat],[VTK_LIB_DIR="-L$dir"])
      fi
    done
    if test "x" = "x$VTK_LIB_DIR"; then
      AC_MSG_ERROR([Could not find vtkexpat in $VTK_DIR])
    fi
    LIBS="$old_LIBS"
    ;;
esac

dnl Define a function that checks for the existence of a library
dnl and if it exists, prepends the corresponding link flag to a 
dnl sepecified variable
dnl Arguments:
dnl  - The library name
dnl  - The name of the variable to which to prepend the library link flag
dnl  - List of extra libraries required for link test
dnl  - Optional library path linker argument (e.g. -L/opt/foo)
AC_DEFUN([SNL_CHECK_LIB_LIST],[
  old_LIBS="$LIBS"
  LIBS="$4 ${$2} $old_LIBS"
  AC_HAVE_LIBRARY([$1],[$2="-l$1 ${$2}"],[],[$3])
  LIBS="$old_LIBS"
])

 # These are ordered such that a given library depends only on those libraries
 # that preceed it in the list.
SNL_CHECK_LIB_LIST([pthread],[vtk_sys_libs])
SNL_CHECK_LIB_LIST([dl],     [vtk_sys_libs])
SNL_CHECK_LIB_LIST([m],      [vtk_sys_libs])
SNL_CHECK_LIB_LIST([gcc],    [vtk_sys_libs])
x_libs_arg="$X_EXTRA_LIBS -lX11 $X_PRE_LIBS"
SNL_CHECK_LIB_LIST([Xext],[vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([ICE], [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([SM],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([Xt],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([GL],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([GLU], [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
vtk_libs_arg="-L$x_libraries $vtk_x_libs $X_EXTRA_LIBS -lX11 $X_PRE_LIBS $vtk_sys_libs"
SNL_CHECK_LIB_LIST([vtkCommon],     [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkDICOMParser],[vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkfreetype],   [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkexpat],      [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkzlib],       [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkpng],        [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkjpeg],       [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtktiff],       [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkftgl],       [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkFiltering],  [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkImaging],    [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkGraphics],   [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkIO],         [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkRendering],  [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])

 # Make sure we found at least vtkCommon and vtkRendering
if ! echo "x $vtk_libs" | grep lvtkCommon >/dev/null; then
  AC_MSG_ERROR("VTK library 'vtkCommon' not found.")
fi
if ! echo "x $vtk_libs" | grep lvtkRendering >/dev/null; then
  AC_MSG_ERROR("VTK library 'vtkRendering' not found.")
fi

AC_LANG_RESTORE


################################################################################
#                                   QT
################################################################################
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_ARG_VAR([QTDIR],[QT installation directory])
if test x"$QTDIR" = x; then
  search_path="$PATH"
  libdir=
  incdir=
  for dir in /usr/include/qt3 /usr/local/include/qt3 /include/qt3; do
    if test x = x${incdir}; then
      if test -d $dir; then
        incdir=-I$dir
      fi
    fi
  done
else
  search_path="${QTDIR}/bin"
  libdir="-L${QTDIR}/lib"
  incdir="-I${QTDIR}/include"
fi

AC_PATH_PROG([MOC],[moc],[],[$search_path])
if test x = x"$MOC";then
  echo "Cannot find moc (Qt meta object compiler)"
fi
AC_SUBST(MOC)
AC_PATH_PROG([UIC],[uic],[],[$search_path])
if test x = x"$UIC";then
  echo "Cannot find uic (Qt user interface compiler)"
fi
AC_SUBST(UIC)

old_CXXFLAGS="$CXXFLAGS"
old_CPPFLAGS="$CPPFLAGS"
CXXFLAGS="$incdir"
CPPFLAGS="$incdir"
AC_CHECK_HEADERS([qlineedit.h qevent.h qapplication.h \
                  qwidget.h qtimer.h qpixmap.h qwidgetplugin.h \
                  qobject.h qmetaobject.h],[],
                 [AC_MSG_ERROR([Required QT header not found])])
CXXFLAGS="$old_CXXFLAGS"
CPPFLAGS="$old_CPPFLAGS"
INCLUDES="$incdir $INCLUDES"

LIBS="$LIBS $libdir"
# Cannot use AC_HAVE_LIBRARY for qt-mt because of
# autoconf bug with libraries that have a '-' in their name.
#AC_HAVE_LIBRARY([qt-mt],[LIBS="$LIBS -lqt-mt"],[
AC_MSG_CHECKING([for main in -lqt-mt])
old_LIBS="$LIBS"
LIBS="$LIBS -lqt-mt"
AC_TRY_LINK_FUNC(main,[AC_MSG_RESULT([yes])],[
  AC_MSG_RESULT([no])
  LIBS="$old_LIBS"
  AC_HAVE_LIBRARY([qt],[LIBS="$LIBS -lqt"],[
    AC_MSG_ERROR([Cannot find QT library])
  ])
])

################################################################################
#                                 X/VTK/QT
################################################################################
dnl Merge lists of libraries
dnl Arguments
dnl  - name of output variable
dnl  - first list
dnl  - second list
AC_DEFUN([SNL_MERGE_LISTS],[
  $1="$2"
  # Reverse list two
  for item3 in $3; do 
    found=no
    for item2 in $2; do
      if test "x$item2" = "x$item3"; then found=yes; fi
    done
    if test "$found" = "no"; then $1="${$1} $item3"; fi
  done
  $1="${$1} $2"
])
SNL_MERGE_LISTS([XLIBS],[$X_EXTRA_LIBS -lX11 $X_PRE_LIBS],[$vtk_x_libs])
SNL_MERGE_LISTS([XLIBS_tmp],[$QT_LIBS],[$XLIBS])
SNL_MERGE_LISTS([XLIBS],[$vtk_sys_libs],[$XLIBS_tmp])
LIBS="$LIBS $vtk_libs $XLIBS"


################################################################################
#                           Output Files
################################################################################
AC_SUBST([INCLUDES])
AC_SUBST([DEFINES])
AC_MSG_RESULT([CXXFLAGS = $CXXFLAGS])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
