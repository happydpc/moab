################################################################################
#                           Standard Stuff
################################################################################
AC_INIT(qvdual, 0.1)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(qvdual,0.1)

AC_PROG_LN_S
AC_PROG_MAKE_SET

SNL_CHECK_COMPILERS
AM_CONDITIONAL(PARALLEL,[test "x$WITH_MPI" != "xno"])
AC_PROG_LIBTOOL
LIBS="-lm"


################################################################################
#                             Misc. Libraries
################################################################################
SNL_CHECK_HDF5
SNL_CHECK_NETCDF


################################################################################
#                       Possible Error conditions
#                       Wait until end of script to print messages
################################################################################
GRAPHVIZ_MISSING=no
X_MISSING=no
VTK_MISSING=no
QT_MISSING=no
MOAB_MISSING=no

################################################################################
#                               GraphViz
################################################################################
AC_ARG_WITH([graphviz],
[AC_HELP_STRING([--with-graphviz=DIR], [Specify directory containing GraphViz])],
[GRAPH_DIR=$withval],[GRAPH_DIR=])

case "x$GRAPH_DIR" in
  xno)
    GRAPHVIZ_MISSING=yes
    ;;
  xyes|x)
    GRAPH_INC_DIR=
    GRAPH_DIR=
    for dir in /usr /usr/local/ /; do
      if test "x" = "x$GRAPH_DIR"; then
        AC_CHECK_FILE([${dir}/include/graphviz/dotneato.h],[GRAPH_DIR="$dir"])
      fi
    done
    AC_MSG_CHECKING([for GraphViz include dir])
    if test "x" != x"$GRAPH_DIR"; then
      GRAPH_INC_DIR="-I${GRAPH_DIR}/include/graphviz"
    fi
    AC_MSG_RESULT([$GRAPH_INC_DIR])
    AC_MSG_CHECKING([for GraphViz library dir])
    GRAPH_LIB_DIR=
    for dir in ${GRAPH_DIR}/lib/graphviz /usr/lib/graphviz /usr/local/lib/graphviz /lib/graphviz; do
      if test "x" = "x$GRAPH_LIB_DIR"; then
        if test -d $dir; then
          GRAPH_LIB_DIR=-L$dir
        fi
      fi
    done
    AC_MSG_RESULT([$GRAPH_LIB_DIR])
    ;;
  x?*)
    GRAPH_INC_DIR=
    for dir in ${GRAPH_DIR}/include/graphviz ${GRAPH_DIR}/include ${GRAPH_DIR}; do
      if test "x" = "x$GRAPH_INC_DIR"; then
        AC_CHECK_FILE([${dir}/dotneato.h],[GRAPH_INC_DIR="-I$dir"])
      fi
    done
    AC_MSG_CHECKING([for GraphViz include dir])
    if test "x" = x"$GRAPH_INC_DIR"; then
      AC_MSG_RESULT([no])
      GRAPHVIZ_MISSING=yes
    else
      AC_MSG_RESULT([$GRAPH_INC_DIR])
    fi
    AC_MSG_CHECKING([for GraphViz library dir])
    GRAPH_LIB_DIR=
    for dir in ${GRAPH_DIR}/lib/graphviz ${GRAPH_DIR}/lib ${GRAPH_DIR}; do
      if test "x" = "x$GRAPH_LIB_DIR"; then
        if test -d $dir; then
          GRAPH_LIB_DIR=-L$dir
        fi
      fi
    done
    if test "x" = x"$GRAPH_LIB_DIR"; then
      AC_MSG_RESULT([no])
      GRAPHVIZ_MISSING=yes
    else
      AC_MSG_RESULT([$GRAPH_LIB_DIR])
    fi
    ;;
esac

old_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $GRAPH_INC_DIR"
AC_CHECK_HEADERS([dotneato.h],[],[AC_MSG_WARN([Missing GraphViz header]); GRAPHVIZ_MISSING=yes])
CPPFLAGS="$old_CPPFLAGS"
INCLUDES="$INCLUDES $GRAPH_INC_DIR"

LIBS="$LIBS $GRAPH_LIB_DIR"
AC_CHECK_LIB([graph],[aginitlib],[],[AC_MSG_WARN([Cannot find GraphViz library: -lgraph]); GRAPHVIZ_MISSING=yes])
AC_CHECK_LIB([dotneato],[gvContext],[],[AC_MSG_WARN([Cannot find GraphViz library: -ldotneato]); GRAPHVIZ_MISSING=yes],[-lgraph])
LIBS="$LIBS -ldotneato -lgraph"


################################################################################
#                                   X
################################################################################
AC_PATH_X
AC_PATH_XTRA
if test "xyes" = "x$no_x"; then
  X_MISSING=yes
fi


################################################################################
#                                  VTK
################################################################################
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

AC_ARG_WITH([vtk],
[AC_HELP_STRING([--with-vtk=DIR], [Specify directory containing VTK])],
[VTK_DIR=$withval],[VTK_DIR=])

case "x$VTK_DIR" in
  xno)
    VTK_MISSING=yes
    ;;
  xyes|x)
    VTK_LIB_DIR=
    VTK_INC_DIR=
    for dir in /usr/include/vtk /usr/local/include/vtk /include/vtk; do
      if test "x" = "x$VTK_INC_DIR"; then
        AC_CHECK_FILE([${dir}/vtkRenderer.h],[VTK_INC_DIR="-I$dir"])
      fi
    done
    if test x = x"$VTK_INC_DIR"; then
      AC_CHECK_HEADER([vtkRenderer.h],[],
                      [VTK_MISSING=yes])
    else
      INCLUDES="$INCLUDES $VTK_INC_DIR"
    fi
    ;;
  x?*)
    for dir in ${VTK_DIR}/include/vtk ${VTK_DIR}/include ${VTK_DIR}; do
      if test "x" = "x$VTK_INC_DIR"; then
        AC_CHECK_FILE([${dir}/vtkRenderer.h],[VTK_INC_DIR="-I$dir"])
      fi
    done
    if test "x" = "x$VTK_INC_DIR"; then
      # Check for non-installed VTK source
      AC_CHECK_FILE([${VTK_DIR}/Rendering/vtkRenderer.h],[
        for subdir in . Common Filtering GenericFiltering Graphics Hybrid Imaging Parallel Patented Rendering Utilities Utilities/vtkexpat Utilities/expat Utilities/DICOMParser Utilties/vtkpng Utilities/vtkzlib Utilities/freetype/include/freetype Wrapping; do
	  AC_MSG_CHECKING([for directory ${VTK_DIR}/$subdir])
	  if test -d ${VTK_DIR}/$subdir; then
	    VTK_INC_DIR="$VTK_INC_DIR -I${VTK_DIR}/$subdir"
	    AC_MSG_RESULT([yes])
	  else
	    AC_MSG_RESULT([no])
	  fi
	done
	],[VTK_MISSING=yes]
      )
    fi
    INCLUDES="$INCLUDES $VTK_INC_DIR"
    old_LIBS="$LIBS"
    for dir in ${VTK_DIR}/lib/vtk ${VTK_DIR}/lib ${VTK_DIR}/bin ${VTK_DIR}; do
      if test "x" = "x$VTK_LIB_DIR"; then
        LIBS="$old_LIBS -L$dir"
        unset ac_cv_lib_vtkexpat
	unset ac_cv_lib_vtkexpat_main
        AC_HAVE_LIBRARY([vtkexpat],[VTK_LIB_DIR="-L$dir"])
      fi
    done
    if test "x" = "x$VTK_LIB_DIR"; then
      VTK_MISSING=yes
    fi
    LIBS="$old_LIBS"
    ;;
esac

dnl Define a function that checks for the existence of a library
dnl and if it exists, prepends the corresponding link flag to a 
dnl sepecified variable
dnl Arguments:
dnl  - The library name
dnl  - The name of the variable to which to prepend the library link flag
dnl  - List of extra libraries required for link test
dnl  - Optional library path linker argument (e.g. -L/opt/foo)
AC_DEFUN([SNL_CHECK_LIB_LIST],[
  old_LIBS="$LIBS"
  LIBS="$4 ${$2} $old_LIBS"
  AC_HAVE_LIBRARY([$1],[$2="-l$1 ${$2}"],[],[$3])
  LIBS="$old_LIBS"
])

 # These are ordered such that a given library depends only on those libraries
 # that preceed it in the list.
SNL_CHECK_LIB_LIST([pthread],[vtk_sys_libs])
SNL_CHECK_LIB_LIST([dl],     [vtk_sys_libs])
SNL_CHECK_LIB_LIST([m],      [vtk_sys_libs])
SNL_CHECK_LIB_LIST([gcc],    [vtk_sys_libs])
x_libs_arg="$X_EXTRA_LIBS -lX11 $X_PRE_LIBS"
SNL_CHECK_LIB_LIST([Xext],[vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([ICE], [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([SM],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([Xt],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([GL],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
SNL_CHECK_LIB_LIST([GLU], [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) 
vtk_libs_arg="-L$x_libraries $vtk_x_libs $X_EXTRA_LIBS -lX11 $X_PRE_LIBS $vtk_sys_libs"
SNL_CHECK_LIB_LIST([vtkCommon],     [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkDICOMParser],[vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkfreetype],   [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkexpat],      [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkzlib],       [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkpng],        [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkjpeg],       [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtktiff],       [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkftgl],       [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkFiltering],  [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkImaging],    [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkGraphics],   [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkIO],         [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkRendering],  [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])
SNL_CHECK_LIB_LIST([vtkParallel],   [vtk_libs],[$vtk_libs_arg],[$VTK_LIB_DIR])

 # Make sure we found at least vtkCommon and vtkRendering
if ! echo "x $vtk_libs" | grep lvtkCommon >/dev/null; then
  AC_MSG_WARN("VTK library 'vtkCommon' not found.")
  VTK_MISSING=yes
fi
if ! echo "x $vtk_libs" | grep lvtkRendering >/dev/null; then
  AC_MSG_WARN("VTK library 'vtkRendering' not found.")
  VTK_MISSING=yes
fi

AC_LANG_RESTORE


################################################################################
#                                   QT
################################################################################
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_ARG_VAR([QTDIR],[QT installation directory])
if test x"$QTDIR" = x; then
  search_path="$PATH"
  libdir=
  incdir=
  for dir in /usr/include/qt3 /usr/local/include/qt3 /include/qt3; do
    if test x = x${incdir}; then
      if test -d $dir; then
        incdir=-I$dir
      fi
    fi
  done
else
  search_path="${QTDIR}/bin"
  libdir="-L${QTDIR}/lib"
  incdir="-I${QTDIR}/include"
fi

AC_PATH_PROG([MOC],[moc],[],[$search_path])
if test x = x"$MOC";then
  AC_MSG_WARN([Cannot find moc (Qt meta object compiler)])
  QT_MISSING=yes
fi
AC_SUBST(MOC)
AC_PATH_PROG([UIC],[uic],[],[$search_path])
if test x = x"$UIC";then
  AC_MSG_WARN([Cannot find uic (Qt user interface compiler)])
  QT_MISSING=yes
fi
AC_SUBST(UIC)

old_CXXFLAGS="$CXXFLAGS"
old_CPPFLAGS="$CPPFLAGS"
CXXFLAGS="$incdir"
CPPFLAGS="$incdir"
AC_CHECK_HEADERS([qlineedit.h qevent.h qapplication.h \
                  qwidget.h qtimer.h qpixmap.h qwidgetplugin.h \
                  qobject.h qmetaobject.h],[],
                 [QT_MISSING=yes])
CXXFLAGS="$old_CXXFLAGS"
CPPFLAGS="$old_CPPFLAGS"
INCLUDES="$incdir $INCLUDES"

LIBS="$LIBS $libdir"
# Cannot use AC_HAVE_LIBRARY for qt-mt because of
# autoconf bug with libraries that have a '-' in their name.
#AC_HAVE_LIBRARY([qt-mt],[LIBS="$LIBS -lqt-mt"],[
AC_MSG_CHECKING([for main in -lqt-mt])
old_LIBS="$LIBS"
LIBS="$LIBS -lqt-mt"
AC_TRY_LINK_FUNC(main,[AC_MSG_RESULT([yes])],[
  AC_MSG_RESULT([no])
  LIBS="$old_LIBS"
  AC_HAVE_LIBRARY([qt],[LIBS="$LIBS -lqt"],[
    QT_MISSING=yes
  ])
])

################################################################################
#                                 X/VTK/QT
################################################################################
dnl Merge lists of libraries
dnl Arguments
dnl  - name of output variable
dnl  - first list
dnl  - second list
AC_DEFUN([SNL_MERGE_LISTS],[
  $1="$2"
  # Reverse list two
  for item3 in $3; do 
    found=no
    for item2 in $2; do
      if test "x$item2" = "x$item3"; then found=yes; fi
    done
    if test "$found" = "no"; then $1="${$1} $item3"; fi
  done
  $1="${$1} $2"
])
SNL_MERGE_LISTS([XLIBS],[$X_EXTRA_LIBS -lX11 $X_PRE_LIBS],[$vtk_x_libs])
SNL_MERGE_LISTS([XLIBS_tmp],[$QT_LIBS],[$XLIBS])
SNL_MERGE_LISTS([XLIBS],[$vtk_sys_libs],[$XLIBS_tmp])
LIBS="$LIBS $VTK_LIB_DIR $vtk_libs $XLIBS"


################################################################################
#                                  MOAB
################################################################################
AC_ARG_WITH(MOAB,
[AC_HELP_STRING([--with-MOAB=DIR], [Specify directory containing MOAB])],
[MOAB_DIR=$withval],[MOAB_DIR=../..])
case "x$MOAB_DIR" in
  xno)
    MOAB_MISSING=yes
    ;;
  xyes|x)
    AC_MSG_ERROR([--with-MOAB=DIR requires an argument])
    ;;
esac

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

MOAB_INC_DIR=
old_CXXCPPFLAGS="$CXXCPPFLAGS"
old_CXXFLAGS="$CXXFLAGS"
old_CPPFLAGS="$CPPFLAGS"
for dir in ${MOAB_DIR} ${MAOB_DIR}/include; do
  if test "x$MOAB_INC_DIR" = "x"; then
    CXXCPPFLAGS="-I$dir"
    CXXFLAGS="$CXXCPPFLAGS"
    CPPFLAGS="$CXXCPPFLAGS"
    unset ac_cv_header_MBInterface_hpp
    AC_CHECK_HEADER([MBInterface.hpp],[MOAB_INC_DIR="$dir"])
  fi
done
if test "x$MOAB_INC_DIR" = "x"; then
  AC_MSG_WARN([Couldn't find MOAB header: MBInterface.hpp"])
  MOAB_MISSING=yes
else
  AC_MSG_RESULT([Found MBInterface.hpp in $MOAB_INC_DIR])
fi
CXXCPPFLAGS="$old_CXXCPPFLAGS"
CXXFLAGS="$old_CXXFLAGS"
CPPFLAGS="$old_CPPFLAGS"
INCLUDES="-I$MOAB_INC_DIR $INCLUDES"
LIBS="-L${MOAB_DIR} -lMOAB $LIBS"

AC_LANG_RESTORE


################################################################################
#                           Output Files
################################################################################
AC_SUBST([INCLUDES])
AC_SUBST([DEFINES])
AC_MSG_RESULT([CXXFLAGS = $CXXFLAGS])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT


###############################################################################
#                    Print post-output errors
###############################################################################
if test "x$MOAB_MISSING" = "xyes"; then
  AC_MSG_WARN([Could not find MOAB.  Build will FAIL!!! Try \"--with-MOAB=DIR\"])
fi
if test "x$GRAPHVIZ_MISSING" = "xyes"; then
  AC_MSG_WARN([Could not find GraphViz library.  Build will FAIL!!! Try \"--with-graphviz=DIR\"])
fi
if test "x$X_MISSING" = "xyes"; then
  AC_MSG_WARN([Cound not find X client.  Build will FAIL!!!])
else
  if test "x$QT_MISSING" = "xyes"; then
    AC_MSG_WARN([Cound not find QT.  Build will FAIL!!! Try setting \"QTDIR\"])
  fi
  if test "x$VTK_MISSING" = "xyes"; then
    AC_MSG_WARN([Count not find VTK.  Build will FAIL!!! Try \"--with-VTK=DIR\"])
  fi
fi
